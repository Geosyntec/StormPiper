last_section <- ""
# Loop through rows of dataframe
for(i in 1:nrow(df)){
table_name <- df$ResultName[i]
section <- df$`Param Category`[i]
variable <- df$Params[i]
description <- df$Description[i]
# If the variables are NA, replace them with an empty string
if(is.na(table_name)) table_name <- ""
if(is.na(section)) section <- ""
if(is.na(variable)) variable <- ""
if(is.na(description)) description <- ""
# Only append table name if it's different from the last one
# if(table_name != last_table_name){
#   output <- c(output, paste0("\n## ", table_name))
#   last_table_name <- table_name
# } else {output <- output}
# Only append section if it's different from the last one
if(section != last_section){
output <- c(output, paste0("\n### ", section))
last_section <- section
} else {output <- output}
# Append variable and description
output <- c(output,
"- **Variable**: ", variable,
"- **Description**: ", description)
}
# Return as single string
return(paste(output, collapse = "\n"))
}
# Convert dataframe to markdown text
md_text <- df_to_md(df)
# Write markdown text to .md file
writeLines(md_text, "output.md")
# Function to convert dataframe to markdown text
df_to_md <- function(df){
output <- c()
last_table_name <- ""
last_section <- ""
# Loop through rows of dataframe
for(i in 1:nrow(df)){
table_name <- df$ResultName[i]
section <- df$`Param Category`[i]
variable <- df$Params[i]
description <- df$Description[i]
# If the variables are NA, replace them with an empty string
if(is.na(table_name)) table_name <- ""
if(is.na(section)) section <- ""
if(is.na(variable)) variable <- ""
if(is.na(description)) description <- ""
# Only append table name if it's different from the last one
# if(table_name != last_table_name){
#   output <- c(output, paste0("\n## ", table_name))
#   last_table_name <- table_name
# } else {output <- output}
# Only append section if it's different from the last one
if(section != last_section){
output <- c(output, paste0("\n### ", section))
last_section <- section
} else {output <- output}
# Append variable and description
output <- c(output,
"<div id='", variable,"'></div>",variable,"<br>",
"  ~ ", description,"<br>")
}
# Return as single string
return(paste(output, collapse = "\n"))
}
# Convert dataframe to markdown text
md_text <- df_to_md(df)
# Write markdown text to .md file
writeLines(md_text, "output.md")
# Function to convert dataframe to markdown text
df_to_md <- function(df){
output <- c()
last_table_name <- ""
last_section <- ""
# Loop through rows of dataframe
for(i in 1:nrow(df)){
table_name <- df$ResultName[i]
section <- df$`Param Category`[i]
variable <- df$Params[i]
description <- df$Description[i]
# If the variables are NA, replace them with an empty string
if(is.na(table_name)) table_name <- ""
if(is.na(section)) section <- ""
if(is.na(variable)) variable <- ""
if(is.na(description)) description <- ""
# Only append table name if it's different from the last one
# if(table_name != last_table_name){
#   output <- c(output, paste0("\n## ", table_name))
#   last_table_name <- table_name
# } else {output <- output}
# Only append section if it's different from the last one
if(section != last_section){
output <- c(output, paste0("\n### ", section))
last_section <- section
} else {output <- output}
# Append variable and description
output <- c(output,
"<div id='", variable,
"'></div>",
variable,
"/n",
"  ~ ", description,"/n")
}
# Return as single string
return(paste(output, collapse = "\n"))
}
# Convert dataframe to markdown text
md_text <- df_to_md(df)
# Write markdown text to .md file
writeLines(md_text, "output.md")
# Convert dataframe to markdown text
md_text <- df_to_md(df)
md_text
# Convert dataframe to markdown text
md_text <- df_to_md(df)
# Write markdown text to .md file
writeLines(md_text, "output.md")
library(readxl)
parameters_dictionary <- read_excel("~/Documents/repos/StormPiper/docs/parameters_dictionary.xlsx",
sheet = "fin")
# Load required libraries
library(knitr)
library(dplyr)
# Assuming 'df' is your dataframe with columns 'Table Name', 'Section', 'Variable', 'Description'
df <- parameters_dictionary
# Function to convert dataframe to markdown text
df_to_md <- function(df){
output <- c()
last_table_name <- ""
last_section <- ""
# Loop through rows of dataframe
for(i in 1:nrow(df)){
table_name <- df$ResultName[i]
section <- df$`Param Category`[i]
variable <- df$Params[i]
description <- df$Description[i]
# If the variables are NA, replace them with an empty string
if(is.na(table_name)) table_name <- ""
if(is.na(section)) section <- ""
if(is.na(variable)) variable <- ""
if(is.na(description)) description <- ""
# Only append table name if it's different from the last one
# if(table_name != last_table_name){
#   output <- c(output, paste0("\n## ", table_name))
#   last_table_name <- table_name
# } else {output <- output}
# Only append section if it's different from the last one
if(section != last_section){
output <- c(output, paste0("\n### ", section))
last_section <- section
} else {output <- output}
# Append variable and description
output <- c(output,
"<div id='", variable,"'></div>",
variable,
"/n",
"  ~ ", description,"/n")
}
# Return as single string
return(paste(output, collapse = "\n"))
}
# Convert dataframe to markdown text
md_text <- df_to_md(df)
# Write markdown text to .md file
writeLines(md_text, "output.md")
# Convert dataframe to markdown text
md_text <- df_to_md(df)
clipr::write_clip(md_text)
library(readxl)
parameters_dictionary <- read_excel("~/Documents/repos/StormPiper/docs/parameters_dictionary.xlsx",
sheet = "fin")
# Load required libraries
library(knitr)
library(dplyr)
# Assuming 'df' is your dataframe with columns 'Table Name', 'Section', 'Variable', 'Description'
df <- parameters_dictionary
# Function to convert dataframe to markdown text
df_to_md <- function(df){
output <- c()
last_table_name <- ""
last_section <- ""
# Loop through rows of dataframe
for(i in 1:nrow(df)){
table_name <- df$ResultName[i]
section <- df$`Param Category`[i]
variable <- df$Params[i]
description <- df$Description[i]
# If the variables are NA, replace them with an empty string
if(is.na(table_name)) table_name <- ""
if(is.na(section)) section <- ""
if(is.na(variable)) variable <- ""
if(is.na(description)) description <- ""
# Only append table name if it's different from the last one
# if(table_name != last_table_name){
#   output <- c(output, paste0("\n## ", table_name))
#   last_table_name <- table_name
# } else {output <- output}
# Only append section if it's different from the last one
if(section != last_section){
output <- c(output, paste0("\n### ", section))
last_section <- section
} else {output <- output}
# Append variable and description
output <- c(output,
"<div id='", variable,"'></div>",
variable,
"/n",
"  ~ ", description,"/n")
}
# Return as single string
return(paste(output, collapse = "\n"))
}
# Convert dataframe to markdown text
md_text <- df_to_md(df)
# Write markdown text to .md file
writeLines(md_text, "output.md")
# Convert dataframe to markdown text
md_text <- df_to_md(df)
# Function to convert dataframe to markdown text
df_to_md <- function(df){
output <- c()
last_table_name <- ""
last_section <- ""
# Loop through rows of dataframe
for(i in 1:nrow(df)){
table_name <- df$ResultName[i]
section <- df$`Param Category`[i]
variable <- df$Params[i]
description <- df$Description[i]
# If the variables are NA, replace them with an empty string
if(is.na(table_name)) table_name <- ""
if(is.na(section)) section <- ""
if(is.na(variable)) variable <- ""
if(is.na(description)) description <- ""
# Only append table name if it's different from the last one
# if(table_name != last_table_name){
#   output <- c(output, paste0("\n## ", table_name))
#   last_table_name <- table_name
# } else {output <- output}
# Only append section if it's different from the last one
if(section != last_section){
output <- c(output, paste0("\n### ", section))
last_section <- section
} else {output <- output}
# Append variable and description
var_info <-paste0("<div id='", variable,"'></div>","/n",variable,"/n","  ~ ", description,"/n")
output <- c(output, var_info)
}
# Return as single string
return(paste(output, collapse = "\n"))
}
# Convert dataframe to markdown text
md_text <- df_to_md(df)
# Function to convert dataframe to markdown text
df_to_md <- function(df){
output <- c()
last_table_name <- ""
last_section <- ""
# Loop through rows of dataframe
for(i in 1:nrow(df)){
table_name <- df$ResultName[i]
section <- df$`Param Category`[i]
variable <- df$Params[i]
description <- df$Description[i]
# If the variables are NA, replace them with an empty string
if(is.na(table_name)) table_name <- ""
if(is.na(section)) section <- ""
if(is.na(variable)) variable <- ""
if(is.na(description)) description <- ""
# Only append table name if it's different from the last one
# if(table_name != last_table_name){
#   output <- c(output, paste0("\n## ", table_name))
#   last_table_name <- table_name
# } else {output <- output}
# Only append section if it's different from the last one
if(section != last_section){
output <- c(output, paste0("\n### ", section))
last_section <- section
} else {output <- output}
# Append variable and description
var_info <-paste0("<div id='", variable,"'></div>","/n",variable,"/n","  ~ ", description,"/n")
output <- c(output, var_info)
}
# Return as single string
return(paste(output, collapse = "\n"))
}
# Convert dataframe to markdown text
md_text <- df_to_md(parameters_dictionary)
# Write markdown text to .md file
writeLines(md_text, "output.md")
var_info <-paste0("<div id='altid'></div>",
variable,
"  ~ ",description )
variable = 'altid'
var_info <-paste0("<div id='altid'></div>",
variable,
"  ~ ",description )
description = 'description'
var_info <-paste0("<div id='altid'></div>",
variable,
"  ~ ",description )
var_info
# Append variable and description
var_info <-paste0("<div id='altid'></div> ",
variable,
"  ~ ",description,collapse = "/n")
var_info
# Append variable and description
var_info <-paste0("<div id='altid'></div> ",
variable,
"  ~ ",description,collapse = "<br>")
var_info
rm(var_info)
# Append variable and description
var_info <-paste0("<div id='altid'></div> ",
variable,
"  ~ ",description,collapse = "<br>")
var_info
# Loop through rows of dataframe
for(i in 1:nrow(df)){
table_name <- df$ResultName[i]
section <- df$`Param Category`[i]
variable <- df$Params[i]
description <- df$Description[i]
# If the variables are NA, replace them with an empty string
if(is.na(table_name)) table_name <- ""
if(is.na(section)) section <- ""
if(is.na(variable)) variable <- ""
if(is.na(description)) description <- ""
# Only append table name if it's different from the last one
# if(table_name != last_table_name){
#   output <- c(output, paste0("\n## ", table_name))
#   last_table_name <- table_name
# } else {output <- output}
# Only append section if it's different from the last one
if(section != last_section){
output <- c(output, paste0("\n### ", section))
last_section <- section
} else {output <- output}
# Append variable and description
var_info <-paste0("<div id='altid'></div> ",
variable,
"  ~ ",description,collapse = "<br>")
output <- c(output, var_info)
}
# Function to convert dataframe to markdown text
df_to_md <- function(df){
output <- c()
last_table_name <- ""
last_section <- ""
# Loop through rows of dataframe
for(i in 1:nrow(df)){
table_name <- df$ResultName[i]
section <- df$`Param Category`[i]
variable <- df$Params[i]
description <- df$Description[i]
# If the variables are NA, replace them with an empty string
if(is.na(table_name)) table_name <- ""
if(is.na(section)) section <- ""
if(is.na(variable)) variable <- ""
if(is.na(description)) description <- ""
# Only append table name if it's different from the last one
# if(table_name != last_table_name){
#   output <- c(output, paste0("\n## ", table_name))
#   last_table_name <- table_name
# } else {output <- output}
# Only append section if it's different from the last one
if(section != last_section){
output <- c(output, paste0("\n### ", section))
last_section <- section
} else {output <- output}
# Append variable and description
var_info <-paste0("<div id='altid'></div> ",
variable,
"  ~ ",description,collapse = "<br>")
output <- c(output, var_info)
}
# Return as single string
return(paste(output, collapse = "\n"))
}
# Convert dataframe to markdown text
md_text <- df_to_md(parameters_dictionary)
# Write markdown text to .md file
writeLines(md_text, "output.md")
# Convert dataframe to markdown text
md_text <- df_to_md(df)
# Function to convert dataframe to markdown text
df_to_md <- function(df){
output <- c()
last_table_name <- ""
last_section <- ""
# Loop through rows of dataframe
for(i in 1:nrow(df)){
table_name <- df$ResultName[i]
section <- df$`Param Category`[i]
variable <- df$Params[i]
description <- df$Description[i]
# If the variables are NA, replace them with an empty string
if(is.na(table_name)) table_name <- ""
if(is.na(section)) section <- ""
if(is.na(variable)) variable <- ""
if(is.na(description)) description <- ""
# Only append table name if it's different from the last one
# if(table_name != last_table_name){
#   output <- c(output, paste0("\n## ", table_name))
#   last_table_name <- table_name
# } else {output <- output}
# Only append section if it's different from the last one
if(section != last_section){
output <- c(output, paste0("\n### ", section))
last_section <- section
} else {output <- output}
# Append variable and description
var_info <-paste0(
"<div id='",variable,"'>",
variable,
"</div> ",
"  ~ ",description,collapse = "<br>")
output <- c(output, var_info)
}
# Return as single string
return(paste(output, collapse = "\n"))
}
# Convert dataframe to markdown text
md_text <- df_to_md(parameters_dictionary)
# Write markdown text to .md file
writeLines(md_text, "output.md")
# Function to convert dataframe to markdown text
df_to_md <- function(df){
output <- c()
last_table_name <- ""
last_section <- ""
# Loop through rows of dataframe
for(i in 1:nrow(df)){
table_name <- df$ResultName[i]
section <- df$`Param Category`[i]
variable <- df$Params[i]
description <- df$Description[i]
# If the variables are NA, replace them with an empty string
if(is.na(table_name)) table_name <- ""
if(is.na(section)) section <- ""
if(is.na(variable)) variable <- ""
if(is.na(description)) description <- ""
# Only append table name if it's different from the last one
# if(table_name != last_table_name){
#   output <- c(output, paste0("\n## ", table_name))
#   last_table_name <- table_name
# } else {output <- output}
# Only append section if it's different from the last one
if(section != last_section){
output <- c(output, paste0("\n### ", section))
last_section <- section
} else {output <- output}
# Append variable and description
var_info <-paste0(
"<div id='",variable,"'>",
variable,
"</div> ",
"  ~ ",description,collapse = "<br>")
output <- c(output, var_info)
}
# Return as single string
return(paste(output, collapse = "\n"))
}
# Convert dataframe to markdown text
md_text <- df_to_md(parameters_dictionary)
# Write markdown text to .md file
writeLines(md_text, "output.md")
# Function to convert dataframe to markdown text
df_to_md <- function(df){
output <- c()
last_table_name <- ""
last_section <- ""
# Loop through rows of dataframe
for(i in 1:nrow(df)){
table_name <- df$ResultName[i]
section <- df$`Param Category`[i]
variable <- df$Params[i]
description <- df$Description[i]
# If the variables are NA, replace them with an empty string
if(is.na(table_name)) table_name <- ""
if(is.na(section)) section <- ""
if(is.na(variable)) variable <- ""
if(is.na(description)) description <- ""
# Only append table name if it's different from the last one
# if(table_name != last_table_name){
#   output <- c(output, paste0("\n## ", table_name))
#   last_table_name <- table_name
# } else {output <- output}
# Only append section if it's different from the last one
if(section != last_section){
output <- c(output, paste0("\n### ", section))
last_section <- section
} else {output <- output}
# Append variable and description
var_info <-paste0(
"<div id='",variable,"'>",
variable,
"  ~ ",description,
"</div> ",collapse = '<br>')
output <- c(output, var_info)
}
# Return as single string
return(paste(output, collapse = "\n"))
}
# Convert dataframe to markdown text
md_text <- df_to_md(parameters_dictionary)
# Write markdown text to .md file
writeLines(md_text, "output.md")
