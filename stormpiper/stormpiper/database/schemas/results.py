from sqlalchemy import JSON, Column, Float, String, Table

from stormpiper.core.context import get_context, get_pocs
from stormpiper.src.organics import VIRTUAL_POCS

from .base_class import Base

POC_PARAMS = get_pocs(get_context())


INFO_COLS = [
    "_version",
    "_config_version",
    "node_type",
]

FACILITY_COLS = [
    "facility_type",
    "valid_model",
    "design_intensity_inhr",
    "design_volume_cuft_cumul",
    "captured_pct",
    "treated_pct",
    "retained_pct",
    "bypassed_pct",
]

FACILITY_VOL_COLS = [
    f"runoff_volume_cuft_{flow_type}"
    for flow_type in [
        "inflow",
        "treated",
        "retained",
        "captured",
        "bypassed",
    ]
]

SUMMARY_LAND_SURFACE_VOL_COLS = [
    f"runoff_volume_cuft_{flow_type}"
    for flow_type in [
        # includes volume routed through this node, not just generated by this node.
        # this works for summarizing discharge from structural facility delineations and
        # subbasins.
        "total_discharged",
    ]
]

LOAD_REMOVED_COLS = [
    *[
        i
        for p in POC_PARAMS
        for i in [
            p["load_col"] + "_inflow",
            p["load_col"] + "_removed",
            p["load_col"] + "_total_discharged",
        ]
    ],
    *[
        i
        for p in POC_PARAMS
        for i in [p["conc_col"] + "_influent", p["conc_col"] + "_effluent"]
    ],
]

LAND_SURFACE_COLS = [
    "area_acres",
    "ro_coeff",
    "eff_area_acres",
]

LOAD_GENERATED_COLS = [
    *[  # load generated by land surface after source controls
        p["load_col"] for p in POC_PARAMS
    ],
    *[p["conc_col"] for p in POC_PARAMS],
]

_tss_cols = [c for c in LOAD_GENERATED_COLS if "tss" in c.lower()]
LOAD_GENERATED_COLS += [
    c.replace("TSS", poc) for c in _tss_cols for poc in VIRTUAL_POCS
]

_tss_cols = [c for c in LOAD_REMOVED_COLS if "tss" in c.lower()]
LOAD_REMOVED_COLS += [c.replace("TSS", poc) for c in _tss_cols for poc in VIRTUAL_POCS]

_COLS = (
    INFO_COLS
    + FACILITY_COLS
    + LAND_SURFACE_COLS
    + FACILITY_VOL_COLS
    + sorted(LOAD_GENERATED_COLS)
    + sorted(LOAD_REMOVED_COLS)
)


COLS = sorted(set(_COLS), key=lambda x: _COLS.index(x))


def column_type(col):
    numerics = ["acres", "conc", "load", "cuft", "inhr", "coeff", "pct"]
    if any(f"_{u}" in col for u in numerics):
        return Float
    return String


class ResultBlob(Base):
    """This table comes directly from nereid solve engine"""

    __table__ = Table(
        "result_blob",
        Base.metadata,
        *[
            Column("node_id", String, primary_key=True),
            Column("epoch", String, primary_key=True),
            Column("blob", JSON),
        ],
        *[Column(n, column_type(n)) for n in COLS],
    )
