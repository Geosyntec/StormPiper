from typing import Any, List

import sqlalchemy as sa
from sqlalchemy import JSON, Column, String
from sqlalchemy.sql.expression import ColumnElement

from stormpiper.core.context import get_context, get_pocs

from ..hacks import view
from .base_class import Base

POC_PARAMS = get_pocs(get_context())


class ResultBlob(Base):
    """This table comes directly from nereid solve engine"""

    __tablename__ = "result_blob"

    node_id = Column(String, primary_key=True)
    epoch = Column(String, primary_key=True)
    blob = Column(JSON)


INFO_COLS = [
    "_version",
    "_config_version",
]

FACILITY_COLS = [
    "node_id",
    "facility_type",
    "node_type",
    "valid_model",
    "design_intensity_inhr",
    "design_volume_cuft_cumul",
    "captured_pct",
    "treated_pct",
    "retained_pct",
    "bypassed_pct",
]

VOLUME_CAPTURED_COLS = [
    f"runoff_volume_cuft_{flow_type}"
    for flow_type in [
        "inflow",
        "treated",
        "retained",
        "captured",
        "bypassed",
    ]
]

LOAD_REMOVED_COLS = [
    *[
        i
        for p in POC_PARAMS
        for i in [p["load_col"] + "_inflow", p["load_col"] + "_removed"]
    ],
    *[
        i
        for p in POC_PARAMS
        for i in [p["conc_col"] + "_influent", p["conc_col"] + "_effluent"]
    ],
]

LAND_SURFACE_COLS = [
    "node_id",
    "area_acres",
    "ro_coeff",
    "eff_area_acres",
    *[  # load generated by land surface after source controls
        p["load_col"] for p in POC_PARAMS
    ],
    *[p["conc_col"] for p in POC_PARAMS],
]

_COLS = (
    INFO_COLS
    + FACILITY_COLS
    + VOLUME_CAPTURED_COLS
    + LOAD_REMOVED_COLS
    + LAND_SURFACE_COLS
)


COLS = sorted(set(_COLS), key=lambda x: _COLS.index(x))


def build_results_view_text(cols: List[str]) -> str:
    json_attr_template = """result_blob.blob -> '{0}' AS "{0}","""
    json_attr_template_last = """result_blob.blob -> '{0}' AS "{0}" """

    json_attrs = "\n".join([json_attr_template.format(col) for col in cols[:-1]])
    json_attrs_last = json_attr_template_last.format(cols[-1])

    result_template = f"""SELECT
result_blob.node_id AS "id",
result_blob.epoch AS "epoch_id",
{json_attrs}
{json_attrs_last}
FROM result_blob
"""
    return result_template


def build_results_view_selectable(cols: List[str]) -> List[ColumnElement[Any]]:
    results = sa.Table("result_blob", Base.metadata)
    _cols = [
        results.c.node_id.label("id"),
        results.c.epoch.label("epoch_id"),
    ]

    for col in cols:
        _cols.append(results.c.blob[col].label(col))

    return _cols  # type: ignore


RESULTS_SELECT_TEXT = build_results_view_text(COLS)
RESULTS_SELECTABLE_COLS = build_results_view_selectable(COLS)


class Result_View(Base):
    __table__ = view(
        "result_v",
        Base.metadata,
        sa.select(*RESULTS_SELECTABLE_COLS),  # type: ignore
    )
