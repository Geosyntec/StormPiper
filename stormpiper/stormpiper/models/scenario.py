from datetime import datetime
from typing import Any
from uuid import UUID

from geojson_pydantic import FeatureCollection, Point, Polygon
from nereid.api.api_v1.models.treatment_facility_models import STRUCTURAL_FACILITY_TYPE
from pydantic import Field

from stormpiper.core.utils import datetime_now

from .base import BaseModel, BaseORM
from .tmnt_attr import TMNTFacilityPatch


class DelineationProps(BaseModel):
    name: None | str = None
    relid: None | str = None


class DelineationPropsUpdate(DelineationProps):
    """these props are autogenerated by the validator function."""

    altid: None | str = None
    node_id: None | str = None


DelineationFeatureCollection = FeatureCollection[Polygon, DelineationProps]
DelineationFeatureCollectionUpdate = FeatureCollection[Polygon, DelineationPropsUpdate]

StructuralFacilityFeatureCollection = FeatureCollection[
    Point, dict[str, Any] | TMNTFacilityPatch | STRUCTURAL_FACILITY_TYPE
]

DELIN_BBOX_COORD_01 = [
    [
        [-122.473, 47.250],
        [-122.466, 47.250],
        [-122.466, 47.255],
        [-122.473, 47.255],
        [-122.473, 47.250],
    ]
]

TMNT_PROPERTIES_BMP_01 = {
    "node_id": "bmp-01",
    "facility_type": "bioretention_with_partial_infiltration_simple",
    "captured_pct": 80,
    "retained_pct": 20,
    "capital_cost": 250000,
    "om_cost_per_yr": 6000,
    "lifespan_yrs": 30,
    "replacement_cost": 180000,
}

DELIN_ONLY = {
    "delineation_collection": {
        "type": "FeatureCollection",
        "features": [
            {
                "type": "Feature",
                "properties": {"name": "delin-01"},
                "geometry": {
                    "type": "Polygon",
                    "coordinates": DELIN_BBOX_COORD_01,
                },
            }
        ],
    }
}

DELIN_TO_TMNT = {
    "delineation_collection": {
        "type": "FeatureCollection",
        "features": [
            {
                "type": "Feature",
                "properties": {
                    "name": "delin-01",
                    "relid": "bmp-01",
                },
                "geometry": {
                    "type": "Polygon",
                    "coordinates": DELIN_BBOX_COORD_01,
                },
            },
            {
                "type": "Feature",
                "properties": {
                    "name": "delin-02",
                    "relid": "bmp-01",
                },
                "geometry": {
                    "type": "Polygon",
                    "coordinates": DELIN_BBOX_COORD_01,
                },
            },
        ],
    },
    "tmnt_facility_collection": {
        "type": "FeatureCollection",
        "features": [
            {
                "type": "Feature",
                "properties": TMNT_PROPERTIES_BMP_01,
                "geometry": {
                    "type": "Point",
                    "coordinates": [-122.473, 47.255],
                },
            },
        ],
    },
}

DELIN_SCENARIO = {"name": "delin only", "input": DELIN_ONLY}
TMNT_SCENARIO = {"name": "tmnt scenario", "input": DELIN_TO_TMNT}

SCENARIO_EXAMPLES = {
    "empty": {"summary": "", "value": {"name": "empty scenario"}},
    "delin only": {"summary": "", "value": DELIN_SCENARIO},
    "delin to tmnt": {"summary": "", "value": TMNT_SCENARIO},
}


class ScenarioInput(BaseModel):
    # if none, validate tmnt facility and do cost analysis. all wq tables are none.
    delineation_collection: DelineationFeatureCollection | None = None

    # if none, compute load from delineation. all wq tables are none.
    tmnt_facility_collection: StructuralFacilityFeatureCollection | None = None


class ScenarioInputUpdate(BaseModel):
    # if none, validate tmnt facility and do cost analysis. all wq tables are none.
    delineation_collection: DelineationFeatureCollectionUpdate | None = None

    # if none, compute load from delineation. all wq tables are none.
    tmnt_facility_collection: StructuralFacilityFeatureCollection | None = None


class ScenarioBase(BaseModel):
    name: str = "unnamed"
    input: ScenarioInput | None = None


class ScenarioPost(ScenarioBase):
    ...


class ScenarioPatch(ScenarioBase):
    ...


class ScenarioUpdate(ScenarioPatch):
    updated_by: str | None = None
    input: ScenarioInputUpdate | None = None
    input_time_updated: datetime | None = Field(default_factory=datetime_now)
    loading_hash: str
    input_hash: str
    result_time_updated: datetime | None = Field(default_factory=datetime_now)
    lgu_boundary: dict | None = None
    lgu_load: list[dict] | None = None
    delin_load: list[dict] | None = None
    structural_tmnt: list[dict] | None = None
    graph_edge: list[dict] | None = None
    structural_tmnt_result: list[dict] | None = None

    def __init__(self, **data: Any) -> None:
        super().__init__(**data)
        self.__fields_set__.add("input_time_updated")
        self.__fields_set__.add("result_time_updated")


class ScenarioSolve(ScenarioUpdate):
    id: UUID


class ScenarioCreate(ScenarioBase):
    loading_hash: str
    input_hash: str
    updated_by: None | str = None
    input_time_updated: datetime | None = Field(default_factory=datetime_now)

    def __init__(self, **data: Any) -> None:
        super().__init__(**data)
        self.__fields_set__.add("input_time_updated")


# Properties shared by models stored in DB
class ScenarioInDBBase(BaseORM, ScenarioUpdate):
    id: UUID
    time_created: datetime | None = None
    time_updated: datetime | None = None


# Properties to return to client
class Scenario(ScenarioInDBBase):
    ...
