"""refactor result_blob drop result_v

Revision ID: 880c6f2e655b
Revises: 19efa2dbe9a9
Create Date: 2022-12-28 16:08:23.664249

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "880c6f2e655b"
down_revision = "19efa2dbe9a9"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # expand result_blob table
    op.add_column("result_blob", sa.Column("_version", sa.String(), nullable=True))
    op.add_column(
        "result_blob", sa.Column("_config_version", sa.String(), nullable=True)
    )
    op.add_column("result_blob", sa.Column("node_type", sa.String(), nullable=True))
    op.add_column("result_blob", sa.Column("facility_type", sa.String(), nullable=True))
    op.add_column("result_blob", sa.Column("valid_model", sa.String(), nullable=True))
    op.add_column(
        "result_blob",
        sa.Column("design_intensity_inhr", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("design_volume_cuft_cumul", sa.Float(), nullable=True),
    )
    op.add_column("result_blob", sa.Column("captured_pct", sa.Float(), nullable=True))
    op.add_column("result_blob", sa.Column("treated_pct", sa.Float(), nullable=True))
    op.add_column("result_blob", sa.Column("retained_pct", sa.Float(), nullable=True))
    op.add_column("result_blob", sa.Column("bypassed_pct", sa.Float(), nullable=True))
    op.add_column("result_blob", sa.Column("area_acres", sa.Float(), nullable=True))
    op.add_column("result_blob", sa.Column("ro_coeff", sa.Float(), nullable=True))
    op.add_column("result_blob", sa.Column("eff_area_acres", sa.Float(), nullable=True))
    op.add_column(
        "result_blob",
        sa.Column("runoff_volume_cuft_inflow", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("runoff_volume_cuft_treated", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("runoff_volume_cuft_retained", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("runoff_volume_cuft_captured", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("runoff_volume_cuft_bypassed", sa.Float(), nullable=True),
    )
    op.add_column("result_blob", sa.Column("DEHP_conc_mg/l", sa.Float(), nullable=True))
    op.add_column("result_blob", sa.Column("DEHP_load_lbs", sa.Float(), nullable=True))
    op.add_column("result_blob", sa.Column("PHE_conc_mg/l", sa.Float(), nullable=True))
    op.add_column("result_blob", sa.Column("PHE_load_lbs", sa.Float(), nullable=True))
    op.add_column("result_blob", sa.Column("PYR_conc_mg/l", sa.Float(), nullable=True))
    op.add_column("result_blob", sa.Column("PYR_load_lbs", sa.Float(), nullable=True))
    op.add_column("result_blob", sa.Column("TCu_conc_ug/l", sa.Float(), nullable=True))
    op.add_column("result_blob", sa.Column("TCu_load_lbs", sa.Float(), nullable=True))
    op.add_column("result_blob", sa.Column("TN_conc_mg/l", sa.Float(), nullable=True))
    op.add_column("result_blob", sa.Column("TN_load_lbs", sa.Float(), nullable=True))
    op.add_column("result_blob", sa.Column("TP_conc_mg/l", sa.Float(), nullable=True))
    op.add_column("result_blob", sa.Column("TP_load_lbs", sa.Float(), nullable=True))
    op.add_column("result_blob", sa.Column("TSS_conc_mg/l", sa.Float(), nullable=True))
    op.add_column("result_blob", sa.Column("TSS_load_lbs", sa.Float(), nullable=True))
    op.add_column("result_blob", sa.Column("TZn_conc_ug/l", sa.Float(), nullable=True))
    op.add_column("result_blob", sa.Column("TZn_load_lbs", sa.Float(), nullable=True))
    op.add_column(
        "result_blob",
        sa.Column("DEHP_conc_mg/l_effluent", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("DEHP_conc_mg/l_influent", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("DEHP_load_lbs_inflow", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("DEHP_load_lbs_removed", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("DEHP_load_lbs_total_discharged", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("PHE_conc_mg/l_effluent", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("PHE_conc_mg/l_influent", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("PHE_load_lbs_inflow", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("PHE_load_lbs_removed", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("PHE_load_lbs_total_discharged", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("PYR_conc_mg/l_effluent", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("PYR_conc_mg/l_influent", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("PYR_load_lbs_inflow", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("PYR_load_lbs_removed", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("PYR_load_lbs_total_discharged", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("TCu_conc_ug/l_effluent", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("TCu_conc_ug/l_influent", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("TCu_load_lbs_inflow", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("TCu_load_lbs_removed", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("TCu_load_lbs_total_discharged", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("TN_conc_mg/l_effluent", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("TN_conc_mg/l_influent", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("TN_load_lbs_inflow", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("TN_load_lbs_removed", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("TN_load_lbs_total_discharged", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("TP_conc_mg/l_effluent", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("TP_conc_mg/l_influent", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("TP_load_lbs_inflow", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("TP_load_lbs_removed", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("TP_load_lbs_total_discharged", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("TSS_conc_mg/l_effluent", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("TSS_conc_mg/l_influent", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("TSS_load_lbs_inflow", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("TSS_load_lbs_removed", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("TSS_load_lbs_total_discharged", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("TZn_conc_ug/l_effluent", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("TZn_conc_ug/l_influent", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("TZn_load_lbs_inflow", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("TZn_load_lbs_removed", sa.Float(), nullable=True),
    )
    op.add_column(
        "result_blob",
        sa.Column("TZn_load_lbs_total_discharged", sa.Float(), nullable=True),
    )

    # drop results_view since the data is made redundant by the above.
    op.execute("DROP VIEW IF EXISTS result_v")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("result_blob", "TZn_load_lbs_total_discharged")
    op.drop_column("result_blob", "TZn_load_lbs_removed")
    op.drop_column("result_blob", "TZn_load_lbs_inflow")
    op.drop_column("result_blob", "TZn_conc_ug/l_influent")
    op.drop_column("result_blob", "TZn_conc_ug/l_effluent")
    op.drop_column("result_blob", "TSS_load_lbs_total_discharged")
    op.drop_column("result_blob", "TSS_load_lbs_removed")
    op.drop_column("result_blob", "TSS_load_lbs_inflow")
    op.drop_column("result_blob", "TSS_conc_mg/l_influent")
    op.drop_column("result_blob", "TSS_conc_mg/l_effluent")
    op.drop_column("result_blob", "TP_load_lbs_total_discharged")
    op.drop_column("result_blob", "TP_load_lbs_removed")
    op.drop_column("result_blob", "TP_load_lbs_inflow")
    op.drop_column("result_blob", "TP_conc_mg/l_influent")
    op.drop_column("result_blob", "TP_conc_mg/l_effluent")
    op.drop_column("result_blob", "TN_load_lbs_total_discharged")
    op.drop_column("result_blob", "TN_load_lbs_removed")
    op.drop_column("result_blob", "TN_load_lbs_inflow")
    op.drop_column("result_blob", "TN_conc_mg/l_influent")
    op.drop_column("result_blob", "TN_conc_mg/l_effluent")
    op.drop_column("result_blob", "TCu_load_lbs_total_discharged")
    op.drop_column("result_blob", "TCu_load_lbs_removed")
    op.drop_column("result_blob", "TCu_load_lbs_inflow")
    op.drop_column("result_blob", "TCu_conc_ug/l_influent")
    op.drop_column("result_blob", "TCu_conc_ug/l_effluent")
    op.drop_column("result_blob", "PYR_load_lbs_total_discharged")
    op.drop_column("result_blob", "PYR_load_lbs_removed")
    op.drop_column("result_blob", "PYR_load_lbs_inflow")
    op.drop_column("result_blob", "PYR_conc_mg/l_influent")
    op.drop_column("result_blob", "PYR_conc_mg/l_effluent")
    op.drop_column("result_blob", "PHE_load_lbs_total_discharged")
    op.drop_column("result_blob", "PHE_load_lbs_removed")
    op.drop_column("result_blob", "PHE_load_lbs_inflow")
    op.drop_column("result_blob", "PHE_conc_mg/l_influent")
    op.drop_column("result_blob", "PHE_conc_mg/l_effluent")
    op.drop_column("result_blob", "DEHP_load_lbs_total_discharged")
    op.drop_column("result_blob", "DEHP_load_lbs_removed")
    op.drop_column("result_blob", "DEHP_load_lbs_inflow")
    op.drop_column("result_blob", "DEHP_conc_mg/l_influent")
    op.drop_column("result_blob", "DEHP_conc_mg/l_effluent")
    op.drop_column("result_blob", "TZn_load_lbs")
    op.drop_column("result_blob", "TZn_conc_ug/l")
    op.drop_column("result_blob", "TSS_load_lbs")
    op.drop_column("result_blob", "TSS_conc_mg/l")
    op.drop_column("result_blob", "TP_load_lbs")
    op.drop_column("result_blob", "TP_conc_mg/l")
    op.drop_column("result_blob", "TN_load_lbs")
    op.drop_column("result_blob", "TN_conc_mg/l")
    op.drop_column("result_blob", "TCu_load_lbs")
    op.drop_column("result_blob", "TCu_conc_ug/l")
    op.drop_column("result_blob", "PYR_load_lbs")
    op.drop_column("result_blob", "PYR_conc_mg/l")
    op.drop_column("result_blob", "PHE_load_lbs")
    op.drop_column("result_blob", "PHE_conc_mg/l")
    op.drop_column("result_blob", "DEHP_load_lbs")
    op.drop_column("result_blob", "DEHP_conc_mg/l")
    op.drop_column("result_blob", "runoff_volume_cuft_bypassed")
    op.drop_column("result_blob", "runoff_volume_cuft_captured")
    op.drop_column("result_blob", "runoff_volume_cuft_retained")
    op.drop_column("result_blob", "runoff_volume_cuft_treated")
    op.drop_column("result_blob", "runoff_volume_cuft_inflow")
    op.drop_column("result_blob", "eff_area_acres")
    op.drop_column("result_blob", "ro_coeff")
    op.drop_column("result_blob", "area_acres")
    op.drop_column("result_blob", "bypassed_pct")
    op.drop_column("result_blob", "retained_pct")
    op.drop_column("result_blob", "treated_pct")
    op.drop_column("result_blob", "captured_pct")
    op.drop_column("result_blob", "design_volume_cuft_cumul")
    op.drop_column("result_blob", "design_intensity_inhr")
    op.drop_column("result_blob", "valid_model")
    op.drop_column("result_blob", "facility_type")
    op.drop_column("result_blob", "node_type")
    op.drop_column("result_blob", "_config_version")
    op.drop_column("result_blob", "_version")

    # Restore non-performant result_v view.
    op.execute(
        """
        DROP VIEW IF EXISTS result_v;
        CREATE OR REPLACE VIEW result_v AS
        SELECT
            result_blob.node_id AS "id",
            result_blob.epoch AS "epoch_id",
            (result_blob.blob ->> '_version')::text AS "_version",
            (result_blob.blob ->> '_config_version')::text AS "_config_version",
            (result_blob.blob ->> 'node_id')::text AS "node_id",
            (result_blob.blob ->> 'node_type')::text AS "node_type",
            (result_blob.blob ->> 'facility_type')::text AS "facility_type",
            (result_blob.blob ->> 'valid_model')::text AS "valid_model",
            (result_blob.blob ->> 'design_intensity_inhr')::float AS "design_intensity_inhr",
            (result_blob.blob ->> 'design_volume_cuft_cumul')::float AS "design_volume_cuft_cumul",
            (result_blob.blob ->> 'captured_pct')::float AS "captured_pct",
            (result_blob.blob ->> 'treated_pct')::float AS "treated_pct",
            (result_blob.blob ->> 'retained_pct')::float AS "retained_pct",
            (result_blob.blob ->> 'bypassed_pct')::float AS "bypassed_pct",
            (result_blob.blob ->> 'area_acres')::float AS "area_acres",
            (result_blob.blob ->> 'ro_coeff')::float AS "ro_coeff",
            (result_blob.blob ->> 'eff_area_acres')::float AS "eff_area_acres",
            (result_blob.blob ->> 'runoff_volume_cuft_inflow')::float AS "runoff_volume_cuft_inflow",
            (result_blob.blob ->> 'runoff_volume_cuft_treated')::float AS "runoff_volume_cuft_treated",
            (result_blob.blob ->> 'runoff_volume_cuft_retained')::float AS "runoff_volume_cuft_retained",
            (result_blob.blob ->> 'runoff_volume_cuft_captured')::float AS "runoff_volume_cuft_captured",
            (result_blob.blob ->> 'runoff_volume_cuft_bypassed')::float AS "runoff_volume_cuft_bypassed",
            (result_blob.blob ->> 'DEHP_conc_mg/l')::float AS "DEHP_conc_mg/l",
            (result_blob.blob ->> 'DEHP_load_lbs')::float AS "DEHP_load_lbs",
            (result_blob.blob ->> 'PHE_conc_mg/l')::float AS "PHE_conc_mg/l",
            (result_blob.blob ->> 'PHE_load_lbs')::float AS "PHE_load_lbs",
            (result_blob.blob ->> 'PYR_conc_mg/l')::float AS "PYR_conc_mg/l",
            (result_blob.blob ->> 'PYR_load_lbs')::float AS "PYR_load_lbs",
            (result_blob.blob ->> 'TCu_conc_ug/l')::float AS "TCu_conc_ug/l",
            (result_blob.blob ->> 'TCu_load_lbs')::float AS "TCu_load_lbs",
            (result_blob.blob ->> 'TN_conc_mg/l')::float AS "TN_conc_mg/l",
            (result_blob.blob ->> 'TN_load_lbs')::float AS "TN_load_lbs",
            (result_blob.blob ->> 'TP_conc_mg/l')::float AS "TP_conc_mg/l",
            (result_blob.blob ->> 'TP_load_lbs')::float AS "TP_load_lbs",
            (result_blob.blob ->> 'TSS_conc_mg/l')::float AS "TSS_conc_mg/l",
            (result_blob.blob ->> 'TSS_load_lbs')::float AS "TSS_load_lbs",
            (result_blob.blob ->> 'TZn_conc_ug/l')::float AS "TZn_conc_ug/l",
            (result_blob.blob ->> 'TZn_load_lbs')::float AS "TZn_load_lbs",
            (result_blob.blob ->> 'DEHP_conc_mg/l_effluent')::float AS "DEHP_conc_mg/l_effluent",
            (result_blob.blob ->> 'DEHP_conc_mg/l_influent')::float AS "DEHP_conc_mg/l_influent",
            (result_blob.blob ->> 'DEHP_load_lbs_inflow')::float AS "DEHP_load_lbs_inflow",
            (result_blob.blob ->> 'DEHP_load_lbs_removed')::float AS "DEHP_load_lbs_removed",
            (result_blob.blob ->> 'DEHP_load_lbs_total_discharged')::float AS "DEHP_load_lbs_total_discharged",
            (result_blob.blob ->> 'PHE_conc_mg/l_effluent')::float AS "PHE_conc_mg/l_effluent",
            (result_blob.blob ->> 'PHE_conc_mg/l_influent')::float AS "PHE_conc_mg/l_influent",
            (result_blob.blob ->> 'PHE_load_lbs_inflow')::float AS "PHE_load_lbs_inflow",
            (result_blob.blob ->> 'PHE_load_lbs_removed')::float AS "PHE_load_lbs_removed",
            (result_blob.blob ->> 'PHE_load_lbs_total_discharged')::float AS "PHE_load_lbs_total_discharged",
            (result_blob.blob ->> 'PYR_conc_mg/l_effluent')::float AS "PYR_conc_mg/l_effluent",
            (result_blob.blob ->> 'PYR_conc_mg/l_influent')::float AS "PYR_conc_mg/l_influent",
            (result_blob.blob ->> 'PYR_load_lbs_inflow')::float AS "PYR_load_lbs_inflow",
            (result_blob.blob ->> 'PYR_load_lbs_removed')::float AS "PYR_load_lbs_removed",
            (result_blob.blob ->> 'PYR_load_lbs_total_discharged')::float AS "PYR_load_lbs_total_discharged",
            (result_blob.blob ->> 'TCu_conc_ug/l_effluent')::float AS "TCu_conc_ug/l_effluent",
            (result_blob.blob ->> 'TCu_conc_ug/l_influent')::float AS "TCu_conc_ug/l_influent",
            (result_blob.blob ->> 'TCu_load_lbs_inflow')::float AS "TCu_load_lbs_inflow",
            (result_blob.blob ->> 'TCu_load_lbs_removed')::float AS "TCu_load_lbs_removed",
            (result_blob.blob ->> 'TCu_load_lbs_total_discharged')::float AS "TCu_load_lbs_total_discharged",
            (result_blob.blob ->> 'TN_conc_mg/l_effluent')::float AS "TN_conc_mg/l_effluent",
            (result_blob.blob ->> 'TN_conc_mg/l_influent')::float AS "TN_conc_mg/l_influent",
            (result_blob.blob ->> 'TN_load_lbs_inflow')::float AS "TN_load_lbs_inflow",
            (result_blob.blob ->> 'TN_load_lbs_removed')::float AS "TN_load_lbs_removed",
            (result_blob.blob ->> 'TN_load_lbs_total_discharged')::float AS "TN_load_lbs_total_discharged",
            (result_blob.blob ->> 'TP_conc_mg/l_effluent')::float AS "TP_conc_mg/l_effluent",
            (result_blob.blob ->> 'TP_conc_mg/l_influent')::float AS "TP_conc_mg/l_influent",
            (result_blob.blob ->> 'TP_load_lbs_inflow')::float AS "TP_load_lbs_inflow",
            (result_blob.blob ->> 'TP_load_lbs_removed')::float AS "TP_load_lbs_removed",
            (result_blob.blob ->> 'TP_load_lbs_total_discharged')::float AS "TP_load_lbs_total_discharged",
            (result_blob.blob ->> 'TSS_conc_mg/l_effluent')::float AS "TSS_conc_mg/l_effluent",
            (result_blob.blob ->> 'TSS_conc_mg/l_influent')::float AS "TSS_conc_mg/l_influent",
            (result_blob.blob ->> 'TSS_load_lbs_inflow')::float AS "TSS_load_lbs_inflow",
            (result_blob.blob ->> 'TSS_load_lbs_removed')::float AS "TSS_load_lbs_removed",
            (result_blob.blob ->> 'TSS_load_lbs_total_discharged')::float AS "TSS_load_lbs_total_discharged",
            (result_blob.blob ->> 'TZn_conc_ug/l_effluent')::float AS "TZn_conc_ug/l_effluent",
            (result_blob.blob ->> 'TZn_conc_ug/l_influent')::float AS "TZn_conc_ug/l_influent",
            (result_blob.blob ->> 'TZn_load_lbs_inflow')::float AS "TZn_load_lbs_inflow",
            (result_blob.blob ->> 'TZn_load_lbs_removed')::float AS "TZn_load_lbs_removed",
            (result_blob.blob ->> 'TZn_load_lbs_total_discharged')::float AS "TZn_load_lbs_total_discharged"
        FROM result_blob
    """
    )
    # ### end Alembic commands ###
